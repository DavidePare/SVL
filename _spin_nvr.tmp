never p1 {    /* !([] ((! (opendoor)) || (standing))) */
T0_init:
	do
	:: atomic { (! (((! (opendoor)) || (standing)))) -> assert(!(! (((! (opendoor)) || (standing))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never p2 {    /* !([] ((! (((controller@down)) || ((controller@up)))) || (! (opendoor)))) */
T0_init:
	do
	:: atomic { (! (((! (((controller@down)) || ((controller@up)))) || (! (opendoor))))) -> assert(!(! (((! (((controller@down)) || ((controller@up)))) || (! (opendoor)))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never p3 {    /* !(! ((((333==1)) || ((333==1))) || ((333==1)))) */
accept_init:
T0_init:
	do
	:: atomic { (! ((! ((((333==1)) || ((333==1))) || ((333==1)))))) -> assert(!(! ((! ((((333==1)) || ((333==1))) || ((333==1))))))) }
	od;
accept_all:
	skip
}
never p4 {    /* !([] (<> (! (opendoor)))) */
T0_init:
	do
	:: (! ((! (opendoor)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((! (opendoor)))) -> goto accept_S4
	od;
}
never p41 {    /* !([] (<> (! ((controller@doorclosed))))) */
T0_init:
	do
	:: (! ((! ((controller@doorclosed))))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((! ((controller@doorclosed))))) -> goto accept_S4
	od;
}
never p5 {    /* !([] (<> (opendoor))) */
T0_init:
	do
	:: (! ((opendoor))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((opendoor))) -> goto accept_S4
	od;
}
never p51 {    /* !([] (<> (! ((controller@dooropened))))) */
T0_init:
	do
	:: (! ((! ((controller@dooropened))))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((! ((controller@dooropened))))) -> goto accept_S4
	od;
}
never p6 {    /* !([] ((! (((piano==elevator)) && (state[(piano-1)]))) || (<> ((controller@dooropened))))) */
T0_init:
	do
	:: (! ((! (((piano==elevator)) && (state[(piano-1)])))) && ! (((controller@dooropened)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((controller@dooropened)))) -> goto accept_S4
	od;
}
